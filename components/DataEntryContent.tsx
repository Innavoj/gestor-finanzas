
import React, { useState, FormEvent } from 'react';
import { useAppContext } from '../store';
import { Product, Transaction, TransactionType, TRANSACTION_CATEGORIES } from '../types';
// generateId is no longer used from constants.ts

const InputField: React.FC<{label: string, id: string, type?: string, value: string | number, onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void, required?: boolean, step?: string, min?: string, options?: {value: string, label: string}[], disabled?: boolean}> = 
  ({ label, id, type = 'text', value, onChange, required = false, step, min, options, disabled = false }) => (
  <div className="mb-4">
    <label htmlFor={id} className="block text-sm font-medium text-slate-700 mb-1">{label}</label>
    {type === 'select' && options ? (
      <select id={id} name={id} value={value} onChange={onChange} required={required} disabled={disabled} className="w-full p-2 border border-slate-300 rounded-md shadow-sm focus:ring-primary focus:border-primary text-sm sm:text-base disabled:bg-slate-100">
        <option value="">Seleccione...</option>
        {options.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
      </select>
    ) : (
      <input type={type} id={id} name={id} value={value} onChange={onChange} required={required} step={step} min={min} disabled={disabled} className="w-full p-2 border border-slate-300 rounded-md shadow-sm focus:ring-primary focus:border-primary text-sm sm:text-base disabled:bg-slate-100" />
    )}
  </div>
);

const DataEntryContent: React.FC = () => {
  const { state, addProduct, addTransaction } = useAppContext();
  const [formType, setFormType] = useState<'product' | 'income' | 'expense'>('product');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Product Form State
  const [productName, setProductName] = useState('');
  const [sku, setSku] = useState('');
  const [purchasePrice, setPurchasePrice] = useState(0);
  const [sellingPrice, setSellingPrice] = useState(0);
  const [stock, setStock] = useState(0);
  const [imageUrl, setImageUrl] = useState('');

  // Transaction Form State
  const [txDate, setTxDate] = useState(new Date().toISOString().split('T')[0]);
  const [txDescription, setTxDescription] = useState('');
  const [txAmount, setTxAmount] = useState(0);
  const [txCategory, setTxCategory] = useState('');
  const [txProductId, setTxProductId] = useState('');
  const [txQuantity, setTxQuantity] = useState(1);
  const [txDueDate, setTxDueDate] = useState('');


  const resetProductForm = () => {
    setProductName(''); setSku(''); setPurchasePrice(0); setSellingPrice(0); setStock(0); setImageUrl('');
  };

  const resetTransactionForm = () => {
    setTxDate(new Date().toISOString().split('T')[0]); setTxDescription(''); setTxAmount(0); setTxCategory(''); setTxProductId(''); setTxQuantity(1); setTxDueDate('');
  };

  const handleProductSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    // ID is generated by backend
    const productData: Omit<Product, 'id' | 'createdAt' | 'updatedAt'> = { 
      name: productName, 
      sku, 
      purchasePrice, 
      sellingPrice, 
      stock,
      // Backend will generate a default if not provided, but for consistency with UI:
      imageUrl: imageUrl || `https://picsum.photos/seed/${sku || productName}/200/200` 
    };
    const result = await addProduct(productData);
    if (result) {
      alert('Producto agregado exitosamente!');
      resetProductForm();
    }
    // Error alert is handled in addProduct context function
    setIsSubmitting(false);
  };

  const handleTransactionSubmit = async (e: FormEvent, type: TransactionType) => {
    e.preventDefault();
    if (txAmount <= 0) {
        alert('El monto debe ser mayor que cero.');
        return;
    }
    if (txProductId && txQuantity <= 0) {
        alert('La cantidad debe ser mayor que cero si se selecciona un producto.');
        return;
    }
    setIsSubmitting(true);

    // Backend determines status and paymentDate based on dueDate
    const transactionData: Omit<Transaction, 'id' | 'status' | 'paymentDate' | 'createdAt' | 'updatedAt' | 'productName'> = {
      type,
      date: txDate,
      description: txDescription,
      amount: txAmount,
      category: txCategory,
      productId: txProductId || undefined,
      quantity: txProductId ? txQuantity : undefined,
      dueDate: txDueDate || undefined,
    };
    
    const result = await addTransaction(transactionData);
    if (result) {
      alert(`Transacción de ${type === 'income' ? 'ingreso' : 'gasto'} agregada exitosamente!`);
      resetTransactionForm();
    }
    // Error alert and stock update (via product re-fetch) handled in addTransaction context function
    setIsSubmitting(false);
  };
  
  const productOptions = state.products.map(p => ({ value: p.id, label: `${p.name} (Stock: ${p.stock})` }));
  const incomeCategories = TRANSACTION_CATEGORIES.INCOME.map(c => ({ value: c, label: c }));
  const expenseCategories = TRANSACTION_CATEGORIES.EXPENSE.map(c => ({ value: c, label: c }));

  const renderForm = () => {
    const commonDisabled = isSubmitting || state.isLoading;
    switch (formType) {
      case 'product':
        return (
          <form onSubmit={handleProductSubmit} className="space-y-4">
            <h2 className="text-lg sm:text-xl font-semibold text-slate-700 mb-4">Agregar Nuevo Producto</h2>
            <InputField label="Nombre del Producto" id="productName" value={productName} onChange={e => setProductName(e.target.value)} required disabled={commonDisabled} />
            <InputField label="SKU" id="sku" value={sku} onChange={e => setSku(e.target.value)} required disabled={commonDisabled} />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <InputField label="Precio de Compra" id="purchasePrice" type="number" step="0.01" min="0" value={purchasePrice} onChange={e => setPurchasePrice(parseFloat(e.target.value))} required disabled={commonDisabled} />
              <InputField label="Precio de Venta" id="sellingPrice" type="number" step="0.01" min="0" value={sellingPrice} onChange={e => setSellingPrice(parseFloat(e.target.value))} required disabled={commonDisabled} />
            </div>
            <InputField label="Stock Inicial" id="stock" type="number" min="0" value={stock} onChange={e => setStock(parseInt(e.target.value))} required disabled={commonDisabled} />
            <InputField label="URL de Imagen (Opcional)" id="imageUrl" value={imageUrl} onChange={e => setImageUrl(e.target.value)} disabled={commonDisabled} />
            <button type="submit" disabled={commonDisabled} className="w-full bg-primary hover:bg-primary-dark text-white font-bold py-2.5 px-4 sm:py-3 rounded-lg transition duration-300 text-sm sm:text-base disabled:opacity-50 disabled:cursor-not-allowed">
              {isSubmitting ? 'Agregando...' : 'Agregar Producto'}
            </button>
          </form>
        );
      case 'income':
      case 'expense':
        const categories = formType === 'income' ? incomeCategories : expenseCategories;
        const showProductFields = (formType === 'income' && txCategory === 'Venta de Producto') || (formType === 'expense' && txCategory === 'Compra de Inventario');
        const canHaveDueDate = formType === 'income' ? 
            ['Venta de Producto', 'Servicios', 'Factura Emitida'].includes(txCategory) :
            ['Compra de Inventario', 'Factura de Proveedor', 'Alquiler', 'Marketing', 'Suministros'].includes(txCategory);

        return (
          <form onSubmit={(e) => handleTransactionSubmit(e, formType)} className="space-y-4">
            <h2 className="text-lg sm:text-xl font-semibold text-slate-700 mb-4">Registrar Nuevo {formType === 'income' ? 'Ingreso' : 'Gasto'}</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <InputField label="Fecha Transacción" id="txDate" type="date" value={txDate} onChange={e => setTxDate(e.target.value)} required disabled={commonDisabled} />
              {canHaveDueDate && (
                 <InputField label="Fecha de Vencimiento (Opcional)" id="txDueDate" type="date" value={txDueDate} onChange={e => setTxDueDate(e.target.value)} disabled={commonDisabled} />
              )}
            </div>
            <InputField label="Descripción" id="txDescription" value={txDescription} onChange={e => setTxDescription(e.target.value)} required disabled={commonDisabled} />
            <InputField label="Monto" id="txAmount" type="number" step="0.01" min="0.01" value={txAmount} onChange={e => setTxAmount(parseFloat(e.target.value))} required disabled={commonDisabled} />
            <InputField 
              label="Categoría" 
              id="txCategory" 
              type="select" 
              options={categories} 
              value={txCategory} 
              onChange={e => { 
                setTxCategory(e.target.value); 
                setTxProductId(''); 
                if (!(['Venta de Producto', 'Servicios', 'Factura Emitida'].includes(e.target.value) || ['Compra de Inventario', 'Factura de Proveedor'].includes(e.target.value))) {
                  setTxDueDate('');
                }
              }} 
              required
              disabled={commonDisabled} 
            />
            
            {showProductFields && (
              <>
                <InputField label="Producto" id="txProductId" type="select" options={productOptions} value={txProductId} onChange={e => setTxProductId(e.target.value)} disabled={commonDisabled} />
                <InputField label="Cantidad" id="txQuantity" type="number" min="1" value={txQuantity} onChange={e => setTxQuantity(parseInt(e.target.value))} disabled={commonDisabled} />
              </>
            )}
            <button type="submit" disabled={commonDisabled} className={`w-full text-white font-bold py-2.5 px-4 sm:py-3 rounded-lg transition duration-300 text-sm sm:text-base disabled:opacity-50 disabled:cursor-not-allowed ${formType === 'income' ? 'bg-accent-positive hover:bg-emerald-600' : 'bg-accent-negative hover:bg-rose-600'}`}>
              {isSubmitting ? 'Registrando...' : `Registrar ${formType === 'income' ? 'Ingreso' : 'Gasto'}`}
            </button>
          </form>
        );
    }
  };

  return (
    <div className="p-4 sm:p-6 space-y-4 sm:space-y-6 bg-lightgray min-h-screen">
      <h1 className="text-2xl sm:text-3xl font-bold text-slate-800">Gestión de Datos</h1>
      <div className="flex space-x-1 sm:space-x-2 mb-4 sm:mb-6 border-b border-slate-300">
        {(['product', 'income', 'expense'] as const).map(type => (
          <button
            key={type}
            onClick={() => { setFormType(type); resetProductForm(); resetTransactionForm(); }}
            disabled={isSubmitting || state.isLoading}
            className={`px-2 py-2 text-xs sm:text-sm sm:px-4 sm:py-2 font-medium rounded-t-lg transition-colors disabled:opacity-70 ${formType === type ? 'bg-primary text-white' : 'bg-slate-200 text-slate-600 hover:bg-slate-300'}`}
          >
            {type === 'product' ? 'Producto' : type === 'income' ? 'Ingreso' : 'Gasto'}
          </button>
        ))}
      </div>
      {state.isLoading && formType === 'product' && state.products.length === 0 && <p className="text-center text-slate-500">Cargando productos...</p>}
      {state.isLoading && (formType === 'income' || formType === 'expense') && state.transactions.length === 0 && <p className="text-center text-slate-500">Cargando transacciones...</p>}
      {state.error && <p className="text-center text-red-500 bg-red-100 p-3 rounded-md">{state.error}</p>}

      <div className="bg-white p-4 sm:p-6 md:p-8 rounded-xl shadow-lg md:max-w-2xl mx-auto">
        {renderForm()}
      </div>
    </div>
  );
};

export default DataEntryContent;
